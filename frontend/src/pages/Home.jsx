import React, { useState, useEffect } from "react";

import { Card, FormField, Loader } from "../components";


const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState("abc");
const [searchedResults, setSearchedResults] = useState(null)
const [searchTimeout, setSearchTimeout] = useState(null)
  

useEffect(() => {
  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch("http://localhost:8080/api/v1/post", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const result = await response.json();

        setAllPosts(result.data.reverse()); //we are reversing it , since we want to show the newest post at top
      }
    } catch (error) {
      alert(error);
    } finally {
      setLoading(false);
    }
  };

  fetchPosts();
}, []);

const handleSearchChange = (e) => {
  setSearchText(e.target.value);
setSearchTimeout(
  setTimeout(() => {
    const searchResults = allPosts.filter(
      (item) =>
        item.name.toLowerCase().includes(searchText.toLowerCase()) ||
        item.propt.toLowerCase().includes(searchText.toLowerCase())
    );
    setSearchedResults(searchResults)
  }, 500)
)
};

const RenderCards = ({ data, title }) => {
  if (data?.length > 0)
    return data.map((post) => <Card key={post._id} {...post} />);

  return (
    <h2 className="mt-5 font-bold text-blue-500 text-xl uppercase">{title}</h2>
  );
};

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-black text-[32px] ">
          The Community Showcase
        </h1>
        <p className="mt-2 text-gray-500  text-[14px] max-w[500px]">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI
        </p>
      </div>

      <div className="mt-16">
        <FormField 
        labelName= "Search posts"
        type="text"
        name="text"
        placeholder="Search posts"
        value={searchText}
        handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />{" "}
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-gray-500 text-xl mb-3">
                Showing results for
                <span className="text-black">{searchText}</span>
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-col-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards data={searchedResults} title="No posts found" />
              ) : (
                <RenderCards data={allPosts} title="No posts found" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;

//grid over flex is only recommended only when you have to show grid of images
//one thing i saw different is the
//JSX file (first we use to use the js file & inside the jsx was used)
// & this jsx file are exported with help of index.js from the folder, each folder have one
